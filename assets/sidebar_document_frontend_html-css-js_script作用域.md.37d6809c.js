import{_ as s,c as n,o as a,d as p}from"./app.22cd8423.js";const C=JSON.parse('{"title":"script作用域","description":"","frontmatter":{},"headers":[{"level":2,"title":"作用域的分类","slug":"作用域的分类","link":"#作用域的分类","children":[]},{"level":2,"title":"那let和const的定义，实质上是如何被访问到的？","slug":"那let和const的定义-实质上是如何被访问到的","link":"#那let和const的定义-实质上是如何被访问到的","children":[]}],"relativePath":"sidebar/document/frontend/html-css-js/script作用域.md","lastUpdated":1683697594000}'),l={name:"sidebar/document/frontend/html-css-js/script作用域.md"},o=p(`<h1 id="script作用域" tabindex="-1">script作用域 <a class="header-anchor" href="#script作用域" aria-hidden="true">#</a></h1><p><strong>细节补充：</strong></p><p>​ var和const以及let定义的变量”未完全初始化前“是undefined，但const和let在“未完全初始化”之前无法被访问（TDZ）所以看起来像是没有被初始化为undefined，但是通过debugger可以看得见。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">debugger</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// b:undefined</span></span>
<span class="line"></span></code></pre></div><h2 id="作用域的分类" tabindex="-1">作用域的分类 <a class="header-anchor" href="#作用域的分类" aria-hidden="true">#</a></h2><ol><li><p><strong>全局作用域</strong></p><p>​ 全局作用域说的就是<code>window</code>，在script脚本开始执行时便被创建。任何作用域下都可以访问该作用域下的定义。</p></li><li><p><strong>本地作用域（函数）</strong></p><p>​ 本地作用域也叫函数作用域或局部作用域，在函数执行时创建，在其函数内部的上下文环境中可以看见。外部全局作用域无法访问其本地作用域的定义。</p></li><li><p><strong>块作用域</strong></p><p>​ 块作用域是ES6（ES2015）新增特性，随<code>let</code>和<code>const</code>同出，在<code>{}</code>内部中通过let和const去定义变量或常量时被创建。在其作用域内的定义，如果是let和const定义，则只在该块作用域中生效。如果是var定义，则在全局window生效。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Block c</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">) </span><span style="color:#676E95;">// &#39;Block c&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(c) </span><span style="color:#676E95;">// error</span></span>
<span class="line"></span></code></pre></div></li><li><p><strong>script作用域</strong></p><p><strong>简单介绍：</strong></p><p>​ script作用域是本篇文章的重头，它类似于块作用域，像是一个全局的块作用域，他和window同级的。script作用域和块作用域的关系就像全局作用域和函数作用域之间的关系。他们非常相似，只是一个是全局，一个是局部。同时script作用域拥有块作用域的特性，你在全局中使用到let或const定义时他才会被创建出来。所以我们可以总结出：</p><p><strong>总结：</strong></p><ol><li>script作用域是块作用域的全局，就像全局作用域和函数作用域之间的关系。他们非常相似，只是一个是全局，一个是局部。</li><li>同时script作用域的特性和块作用域一样，如果内部没有let和const定义，作用域便不会被创建出来。也就是说如果整个script脚本没有任何let和const定义，那么script作用域不会被创建。</li></ol><p><strong>请在控制台自行按照以下方式去验证本篇文章的赘述。</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">debugger</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">window a</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">debugger</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script b</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F78C6C;">debugger</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Block c</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">debugger</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Fun</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Fun a</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Fun b</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">debugger</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">Fun</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p><a href="https://imgtu.com/i/oTIv4g" target="_blank" rel="noreferrer"><img src="https://s4.ax1x.com/2021/12/11/oTIv4g.gif" alt="oTIv4g.gif"></a></p></li></ol><h2 id="那let和const的定义-实质上是如何被访问到的" tabindex="-1">那let和const的定义，实质上是如何被访问到的？ <a class="header-anchor" href="#那let和const的定义-实质上是如何被访问到的" aria-hidden="true">#</a></h2><p>​ 既然我们已经知道了全局下的let和const定义会被放到script作用域内，然后又因为script类似块作用域的特性，那么我们可以从块作用域内的变量是如何被访问到的从而下定论。那么我们在块作用域下是如何访问到let和const定义的？答案就是：<strong>直接访问</strong>。他和函数作用域内部的环境是一样的，所有的定义都放到了script作用域中，但他并没有暴露这个script作用域，同时你可以直接访问到它的定义。</p>`,8),e=[o];function t(c,r,i,y,F,D){return a(),n("div",null,e)}const A=s(l,[["render",t]]);export{C as __pageData,A as default};
