import{_ as s,c as a,o as n,d as l}from"./app.552e1d14.js";const C=JSON.parse('{"title":"图片懒加载","description":"","frontmatter":{},"headers":[{"level":2,"title":"图片懒加载是什么？","slug":"图片懒加载是什么","link":"#图片懒加载是什么","children":[]},{"level":2,"title":"图片懒加载原理？","slug":"图片懒加载原理","link":"#图片懒加载原理","children":[]},{"level":2,"title":"具体实现步骤：","slug":"具体实现步骤","link":"#具体实现步骤","children":[]}],"relativePath":"sidebar/document/frontend/html-css-js/图片懒加载原生js实现.md","lastUpdated":null}'),p={name:"sidebar/document/frontend/html-css-js/图片懒加载原生js实现.md"},o=l(`<h1 id="图片懒加载" tabindex="-1">图片懒加载 <a class="header-anchor" href="#图片懒加载" aria-hidden="true">#</a></h1><h2 id="图片懒加载是什么" tabindex="-1">图片懒加载是什么？ <a class="header-anchor" href="#图片懒加载是什么" aria-hidden="true">#</a></h2><p>​ 图片懒加载其实就是当用户滑动到指定图片位置时，才会进行请求图片资源的一个操作。这样做的目的可以有效地减缓页面初始化时的效率，用户没有滑动到指定图片时，不会发送请求图片资源。</p><p><a href="https://imgtu.com/i/on6EGR" target="_blank" rel="noreferrer"><img src="https://z3.ax1x.com/2021/11/28/on6EGR.gif" alt="on6EGR.gif"></a></p><h2 id="图片懒加载原理" tabindex="-1">图片懒加载原理？ <a class="header-anchor" href="#图片懒加载原理" aria-hidden="true">#</a></h2><p>​ 我们都知道，请求图片资源的http请求是无法手动控制的，当一个img元素拥有一个src属性时，在页面初始化时便会立刻发送请求。所以如果要控制何时发送请求，只可通过初始化时不写入src属性，当指定条件触发时才会为该img元素添加src属性。这样就实现了图片懒加载的基本操作。而我们可以通过为需要懒加载的元素提前设置一个自定义属性，例如：<code>&lt;img data-src=&quot;xxx.jpg&quot;&gt;&lt;/img&gt;</code>，然后在图片显示到可视区域时，将该自定义属性的值，设置到该元素的src属性上，便可实现懒加载特性。</p><h2 id="具体实现步骤" tabindex="-1">具体实现步骤： <a class="header-anchor" href="#具体实现步骤" aria-hidden="true">#</a></h2><ol><li><p>先获取我们需要懒加载的所有图片元素</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 这是我的获取，请根据自己的选择器来获取</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> imgs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelectorAll</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#list&gt;li&gt;img[data-src]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div></li><li><p>创建一个观察实例，并指定观察对象(元素)触发时的回调</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">IntersectionObserver</span><span style="color:#A6ACCD;">(callback)</span></span>
<span class="line"></span></code></pre></div></li><li><p>循环遍历需要监视的图片元素，然后通过obs实例的observer方法来观察该元素</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">imgs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">img</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;">// 受到observe监视的元素在能够看到该元素以及从看到至看不到该元素时都会触发一次</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">obs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">observe</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">img</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div></li><li><p>定义目标元素与观察对象的根相交时（看到元素或从看到到离开时）触发的回调</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> callback </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">entries</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 回调的参数是一个观察对象集合的数组，即当前触发的所有观察对象</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 4.1循环遍历观察对象，判断当前观察对象是否在可见区域</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">entries</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">entrie</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// 通过观察对象的isIntersecting方法判断是否在窗口可见区域</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">entrie</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isIntersecting</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;">/*</span></span>
<span class="line"><span style="color:#676E95;">           4.2</span></span>
<span class="line"><span style="color:#676E95;">           当确定观察对象在可见区域，便设置该图片元</span></span>
<span class="line"><span style="color:#676E95;">           素的src属性值为data-src的值，以达到懒加载特性</span></span>
<span class="line"><span style="color:#676E95;">        */</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data_src</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">entrie</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAttribute</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">data-src</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">img</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">entrie</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">img</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAttribute</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">src</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data_src</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">// 4.3设置完成后已无需观察该元素，那么停止对该元素的观察</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">observer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unobserve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">img</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ol><p>即时，便可实现图片懒加载的特性了。</p>`,9),e=[o];function t(c,r,y,i,F,D){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
