import{_ as e,c as p,e as t,w as o,a as s,b as a,d as l,r as c,o as r}from"./app.22cd8423.js";const x=JSON.parse('{"title":"解决TypeScript命名冲突的几种方式","description":"","frontmatter":{},"headers":[{"level":2,"title":"报错问题产生原因：","slug":"报错问题产生原因","link":"#报错问题产生原因","children":[]},{"level":2,"title":"解决方式：","slug":"解决方式","link":"#解决方式","children":[]},{"level":2,"title":"推荐方式？","slug":"推荐方式","link":"#推荐方式","children":[]}],"relativePath":"sidebar/document/frontend/typescript/解决TypeScript命名冲突的2种方式.md","lastUpdated":1683697594000}'),i={name:"sidebar/document/frontend/typescript/解决TypeScript命名冲突的2种方式.md"},d=s("h1",{id:"解决typescript命名冲突的几种方式",tabindex:"-1"},[a("解决TypeScript命名冲突的几种方式 "),s("a",{class:"header-anchor",href:"#解决typescript命名冲突的几种方式","aria-hidden":"true"},"#")],-1),y=s("h2",{id:"报错问题产生原因",tabindex:"-1"},[a("报错问题产生原因： "),s("a",{class:"header-anchor",href:"#报错问题产生原因","aria-hidden":"true"},"#")],-1),_=s("p",null,[a("​ 在刚开始接触ts的伙伴肯定遇到一个问题，我在"),s("code",null,"a.ts"),a("文件中定义的变量，我在"),s("code",null,"b.ts"),a("中也定义了这个变量名，那么ts会产生报错。")],-1),D=s("img",{src:"https://z3.ax1x.com/2021/11/28/oKFoJf.png",alt:"oKFoJf.png",style:{zoom:"50%"}},null,-1),F=l(`<p>​ 这是因为所有的ts文件默认都是<strong>全局命名空间模块</strong>，所以会产生命名冲突。</p><h2 id="解决方式" tabindex="-1">解决方式： <a class="header-anchor" href="#解决方式" aria-hidden="true">#</a></h2><p><strong>方式1：</strong></p><p>​ 通过在文件顶部使用ES6模块化，从而将当前文件定义为文件模块而非全局模块。使用这种方式，TS就会将该文件当作一个独立的文件模块了。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;">// export不一定需要导出变量，这样也能够定义为文件模块</span></span>
<span class="line"><span style="color:#C792EA;">export</span></span>
<span class="line"><span style="color:#676E95;">// 使用import也会将当前文件定义为文件模块</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bar</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar.ts</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p><strong>方式2：</strong></p><p>​ 通过立即执行函数包裹逻辑来创造一个单独的作用域，从而实现不污染全局命名空间</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 这里因为是一个单独的作用域，所以并不会污染全局，也不会报错</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#F07178;"> = </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span></span>
<span class="line"></span></code></pre></div><h2 id="推荐方式" tabindex="-1">推荐方式？ <a class="header-anchor" href="#推荐方式" aria-hidden="true">#</a></h2><p>以上两种方式，推荐第一种，这是比较官方的解决方式，在实际的开发中，通常的一个TS模块大多数情况都会使用到ES6模块。</p>`,10);function h(C,u,A,g,f,m){const n=c("center");return r(),p("div",null,[d,y,_,t(n,null,{default:o(()=>[D]),_:1}),F])}const S=e(i,[["render",h]]);export{x as __pageData,S as default};
